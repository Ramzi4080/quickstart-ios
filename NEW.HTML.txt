<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام إدارة المشتريات والخدمات</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: 'Cairo', sans-serif;
        }
        .swal2-popup {
            font-family: 'Cairo', sans-serif;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        /* Styles for printing reports */
        @media print {
            body * {
                visibility: hidden;
            }
            #print-area, #print-area * {
                visibility: visible;
            }
            #print-area {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
            .no-print {
                display: none;
            }
        }
    </style>
</head>
<body class="bg-gray-100">

    <!-- منطقة الطباعة -->
    <div id="print-area" class="hidden"></div>

    <!-- شاشة تسجيل الدخول -->
    <div id="login-screen" class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-lg">
            <div>
                <img class="mx-auto h-20 w-auto" src="https://storage.googleapis.com/gemini-prod-us-west1-423523961425-assets/9e6e8125026900a0b25e133c94f57c91" alt="شعار الشركة">
                <h2 id="login-title" class="mt-6 text-center text-3xl font-extrabold text-gray-900">تسجيل الدخول إلى حسابك</h2>
            </div>
            <form id="login-form" class="mt-8 space-y-6" action="#" method="POST">
                <div class="rounded-md shadow-sm -space-y-px">
                    <div>
                        <label for="email-address" class="sr-only">البريد الإلكتروني</label>
                        <input id="email-address" name="email" type="email" autocomplete="email" required class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="البريد الإلكتروني">
                    </div>
                    <div>
                        <label for="password" class="sr-only">كلمة المرور</label>
                        <input id="password" name="password" type="password" autocomplete="current-password" required class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="كلمة المرور">
                    </div>
                </div>

                <div>
                    <button type="submit" id="login-button" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        تسجيل الدخول
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- واجهة التطبيق الرئيسية -->
    <div id="app" class="hidden">
        <div class="flex h-screen bg-gray-200">
            <!-- الشريط الجانبي -->
            <div id="sidebar" class="w-64 bg-gray-800 text-white flex-shrink-0 rtl:border-l-2 ltr:border-r-2 border-gray-700">
                <div class="p-4 flex items-center justify-center">
                    <img src="https://storage.googleapis.com/gemini-prod-us-west1-423523961425-assets/9e6e8125026900a0b25e133c94f57c91" alt="شعار الشركة" class="h-16">
                </div>
                <nav class="mt-5">
                    <a href="#" data-page="dashboard" class="nav-link block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 bg-gray-700"><span data-lang="dashboard">لوحة التحكم</span></a>
                    <a href="#" data-page="work-orders" class="nav-link block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700"><span data-lang="work_orders">أوامر العمل</span></a>
                    <a href="#" data-page="delivery-orders" class="nav-link block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700"><span data-lang="delivery_orders">أوامر التسليم</span></a>
                    <a href="#" data-page="users" id="users-nav" class="nav-link block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 admin-only"><span data-lang="users">المستخدمون</span></a>
                </nav>
            </div>

            <!-- المحتوى الرئيسي -->
            <div class="flex-1 flex flex-col overflow-hidden">
                <!-- الشريط العلوي -->
                <header class="flex justify-between items-center p-4 bg-white border-b-2 border-gray-200">
                    <h1 id="page-title" class="text-2xl font-semibold text-gray-800" data-lang="dashboard">لوحة التحكم</h1>
                    <div class="flex items-center space-x-4 rtl:space-x-reverse">
                        <button id="export-excel" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-flex items-center">
                            <svg class="fill-current w-4 h-4 ltr:mr-2 rtl:ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z"/></svg>
                            <span data-lang="export_excel">تصدير Excel</span>
                        </button>
                        <select id="language-switcher" class="p-2 rounded border border-gray-300">
                            <option value="ar">العربية</option>
                            <option value="en">English</option>
                        </select>
                        <div id="user-info" class="text-gray-700"></div>
                        <button id="logout-button" class="text-sm text-red-600 hover:text-red-800"><span data-lang="logout">تسجيل الخروج</span></button>
                    </div>
                </header>
                
                <!-- محتوى الصفحة -->
                <main id="main-content" class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100 p-6">
                    <!-- سيتم حقن محتوى الصفحات هنا -->
                </main>
            </div>
        </div>
    </div>

    <!-- Modal Template -->
    <div id="modal-template" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title-text"></h3>
                            <div class="mt-2" id="modal-body">
                                <!-- Modal form content goes here -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="button" id="modal-save-button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm"></button>
                    <button type="button" id="modal-cancel-button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"></button>
                </div>
            </div>
        </div>
    </div>


    <script type="module">
        // استيراد وظائف Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signOut, 
            onAuthStateChanged 
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            collection, 
            addDoc, 
            getDocs, 
            doc, 
            getDoc,
            updateDoc,
            deleteDoc,
            query,
            where,
            onSnapshot
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // إعداد Firebase - استبدل هذا بكائن الإعداد الخاص بك
        const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "YOUR_AUTH_DOMAIN",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_STORAGE_BUCKET",
            messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
            appId: "YOUR_APP_ID"
        };

        // تهيئة Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // متغيرات الحالة
        let currentUser = null;
        let currentUserData = null;
        let currentLang = 'ar';
        let workOrdersUnsubscribe = null;
        let deliveryOrdersUnsubscribe = null;
        let usersUnsubscribe = null;

        // قواميس الترجمة
        const translations = {
            en: {
                dashboard: "Dashboard",
                work_orders: "Work Orders",
                delivery_orders: "Delivery Orders",
                users: "Users",
                export_excel: "Export to Excel",
                logout: "Logout",
                login_title: "Sign in to your account",
                login_button: "Sign in",
                add_new_work_order: "Add New Work Order",
                add_new_delivery_order: "Add New Delivery Order",
                add_new_user: "Add New User",
                edit_work_order: "Edit Work Order",
                edit_delivery_order: "Edit Delivery Order",
                edit_user: "Edit User",
                save: "Save",
                cancel: "Cancel",
                // ... other translations
            },
            ar: {
                dashboard: "لوحة التحكم",
                work_orders: "أوامر العمل",
                delivery_orders: "أوامر التسليم",
                users: "المستخدمون",
                export_excel: "تصدير Excel",
                logout: "تسجيل الخروج",
                login_title: "تسجيل الدخول إلى حسابك",
                login_button: "تسجيل الدخول",
                add_new_work_order: "إضافة أمر عمل جديد",
                add_new_delivery_order: "إضافة أمر تسليم جديد",
                add_new_user: "إضافة مستخدم جديد",
                edit_work_order: "تعديل أمر عمل",
                edit_delivery_order: "تعديل أمر تسليم",
                edit_user: "تعديل مستخدم",
                save: "حفظ",
                cancel: "إلغاء",
                // ... other translations
            }
        };

        // وظيفة لتحديث واجهة المستخدم بناءً على اللغة
        const updateUIlanguage = () => {
            document.documentElement.lang = currentLang;
            document.documentElement.dir = currentLang === 'ar' ? 'rtl' : 'ltr';
            document.querySelectorAll('[data-lang]').forEach(el => {
                const key = el.getAttribute('data-lang');
                if (translations[currentLang][key]) {
                    el.textContent = translations[currentLang][key];
                }
            });
             // تحديث عناوين الأعمدة في الجداول
            updateTableHeaders();
        };
        
        const updateTableHeaders = () => {
            const page = document.querySelector('.nav-link.bg-gray-700')?.dataset.page;
            if (page === 'work-orders') renderWorkOrdersPage();
            if (page === 'delivery-orders') renderDeliveryOrdersPage();
            if (page === 'users') renderUsersPage();
        };


        // معالج تغيير اللغة
        document.getElementById('language-switcher').addEventListener('change', (e) => {
            currentLang = e.target.value;
            updateUIlanguage();
        });

        // مراقبة حالة المصادقة
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                currentUser = user;
                const userDocRef = doc(db, "users", user.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    currentUserData = userDocSnap.data();
                    document.getElementById('user-info').textContent = currentUserData.name;
                    document.getElementById('login-screen').classList.add('hidden');
                    document.getElementById('app').classList.remove('hidden');
                    setupUIForUserRole();
                    navigateTo('dashboard');
                } else {
                    // User profile doesn't exist, handle appropriately
                    console.error("User data not found in Firestore!");
                    handleLogout();
                }
            } else {
                currentUser = null;
                currentUserData = null;
                document.getElementById('login-screen').classList.remove('hidden');
                document.getElementById('app').classList.add('hidden');
                // Unsubscribe from listeners when logged out
                if (workOrdersUnsubscribe) workOrdersUnsubscribe();
                if (deliveryOrdersUnsubscribe) deliveryOrdersUnsubscribe();
                if (usersUnsubscribe) usersUnsubscribe();
            }
        });

        // معالج تسجيل الدخول
        document.getElementById('login-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('email-address').value;
            const password = document.getElementById('password').value;
            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'خطأ في تسجيل الدخول',
                    text: error.message,
                });
            }
        });

        // معالج تسجيل الخروج
        document.getElementById('logout-button').addEventListener('click', handleLogout);

        async function handleLogout() {
            try {
                await signOut(auth);
            } catch (error) {
                console.error("Error signing out: ", error);
            }
        }

        // إعداد واجهة المستخدم بناءً على دور المستخدم
        const setupUIForUserRole = () => {
            const adminElements = document.querySelectorAll('.admin-only');
            if (currentUserData && currentUserData.role === 'admin') {
                adminElements.forEach(el => el.style.display = 'block');
            } else {
                adminElements.forEach(el => el.style.display = 'none');
            }
        };

        // التنقل بين الصفحات
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = link.dataset.page;
                navigateTo(page);
            });
        });

        function navigateTo(page) {
            document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('bg-gray-700'));
            document.querySelector(`.nav-link[data-page="${page}"]`).classList.add('bg-gray-700');
            document.getElementById('page-title').textContent = document.querySelector(`.nav-link[data-page="${page}"] span`).textContent;
            
            // Unsubscribe from previous listeners
            if (workOrdersUnsubscribe) workOrdersUnsubscribe();
            if (deliveryOrdersUnsubscribe) deliveryOrdersUnsubscribe();
            if (usersUnsubscribe) usersUnsubscribe();

            switch (page) {
                case 'dashboard':
                    renderDashboardPage();
                    break;
                case 'work-orders':
                    renderWorkOrdersPage();
                    break;
                case 'delivery-orders':
                    renderDeliveryOrdersPage();
                    break;
                case 'users':
                    if (currentUserData.role === 'admin') {
                        renderUsersPage();
                    }
                    break;
            }
        }

        // وظائف العرض للصفحات
        function renderDashboardPage() {
            const content = document.getElementById('main-content');
            const titles = {
                ar: { welcome: `مرحباً بك، ${currentUserData?.name || ''}`, summary: "ملخص النظام", wo: "أوامر العمل", dos: "أوامر التسليم" },
                en: { welcome: `Welcome, ${currentUserData?.name || ''}`, summary: "System Summary", wo: "Work Orders", dos: "Delivery Orders" }
            };
            content.innerHTML = `
                <div class="text-2xl mb-6">${titles[currentLang].welcome}</div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h3 class="text-xl font-semibold mb-2">${titles[currentLang].summary}</h3>
                        <p id="work-orders-count">${titles[currentLang].wo}: ...</p>
                        <p id="delivery-orders-count">${titles[currentLang].dos}: ...</p>
                    </div>
                </div>
            `;
             getDocs(collection(db, "work-orders")).then(snap => {
                document.getElementById('work-orders-count').textContent = `${titles[currentLang].wo}: ${snap.size}`;
            });
            getDocs(collection(db, "delivery-orders")).then(snap => {
                document.getElementById('delivery-orders-count').textContent = `${titles[currentLang].dos}: ${snap.size}`;
            });
        }

        function renderWorkOrdersPage() {
            const content = document.getElementById('main-content');
            const headers = {
                ar: ["رقم الأمر", "العميل", "التاريخ", "الحالة", "إجراءات"],
                en: ["Order #", "Client", "Date", "Status", "Actions"]
            };
            const labels = {
                ar: { add: "إضافة أمر عمل جديد", search: "ابحث عن أمر عمل..." },
                en: { add: "Add New Work Order", search: "Search work orders..." }
            };
            content.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <input id="search-input" type="text" placeholder="${labels[currentLang].search}" class="p-2 border rounded w-1/3">
                    <button id="add-new-wo" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">${labels[currentLang].add}</button>
                </div>
                <div class="bg-white shadow-md rounded my-6 overflow-x-auto">
                    <table class="min-w-max w-full table-auto">
                        <thead>
                            <tr class="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                                ${headers[currentLang].map(h => `<th class="py-3 px-6 text-left">${h}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody id="work-orders-table" class="text-gray-600 text-sm font-light">
                            <!-- Rows will be inserted here -->
                        </tbody>
                    </table>
                </div>
            `;
            document.getElementById('add-new-wo').addEventListener('click', () => openWorkOrderModal());
            
            const workOrdersRef = collection(db, "work-orders");
            workOrdersUnsubscribe = onSnapshot(workOrdersRef, (snapshot) => {
                const tableBody = document.getElementById('work-orders-table');
                tableBody.innerHTML = ''; // Clear previous data
                snapshot.forEach(doc => {
                    const order = doc.data();
                    const row = `
                        <tr class="border-b border-gray-200 hover:bg-gray-100">
                            <td class="py-3 px-6 text-left whitespace-nowrap">${order.orderNumber}</td>
                            <td class="py-3 px-6 text-left">${order.client}</td>
                            <td class="py-3 px-6 text-left">${order.date}</td>
                            <td class="py-3 px-6 text-left"><span class="bg-purple-200 text-purple-600 py-1 px-3 rounded-full text-xs">${order.status}</span></td>
                            <td class="py-3 px-6 text-center">
                                <div class="flex item-center justify-center">
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 view-wo">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                                    </button>
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 edit-wo">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                    </button>
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 delete-wo admin-only" style="display: ${currentUserData.role === 'admin' ? 'block' : 'none'}">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    tableBody.innerHTML += row;
                });
                attachWorkOrderEventListeners();
            });
        }
        
        function attachWorkOrderEventListeners() {
            document.querySelectorAll('.edit-wo').forEach(btn => btn.addEventListener('click', (e) => openWorkOrderModal(e.currentTarget.dataset.id)));
            document.querySelectorAll('.delete-wo').forEach(btn => btn.addEventListener('click', (e) => deleteDocument('work-orders', e.currentTarget.dataset.id)));
            document.querySelectorAll('.view-wo').forEach(btn => btn.addEventListener('click', (e) => viewDocument('work-orders', e.currentTarget.dataset.id)));
        }

        async function openWorkOrderModal(docId = null) {
            const isEditing = docId !== null;
            let existingData = {};
            if (isEditing) {
                const docRef = doc(db, 'work-orders', docId);
                const docSnap = await getDoc(docRef);
                if (docSnap.exists()) {
                    existingData = docSnap.data();
                }
            }

            const title = isEditing ? 'تعديل أمر عمل' : 'إضافة أمر عمل جديد';
            const formHtml = `
                <form id="wo-form">
                    <input type="text" id="wo-number" placeholder="رقم أمر العمل" class="w-full p-2 mb-2 border rounded" value="${existingData.orderNumber || ''}" required>
                    <input type="text" id="wo-client" placeholder="اسم العميل" class="w-full p-2 mb-2 border rounded" value="${existingData.client || ''}" required>
                    <input type="date" id="wo-date" class="w-full p-2 mb-2 border rounded" value="${existingData.date || new Date().toISOString().split('T')[0]}" required>
                    <select id="wo-status" class="w-full p-2 mb-2 border rounded" required>
                        <option value="جديد" ${existingData.status === 'جديد' ? 'selected' : ''}>جديد</option>
                        <option value="قيد التنفيذ" ${existingData.status === 'قيد التنفيذ' ? 'selected' : ''}>قيد التنفيذ</option>
                        <option value="مكتمل" ${existingData.status === 'مكتمل' ? 'selected' : ''}>مكتمل</option>
                        <option value="ملغى" ${existingData.status === 'ملغى' ? 'selected' : ''}>ملغى</option>
                    </select>
                    <textarea id="wo-details" placeholder="تفاصيل العمل" class="w-full p-2 mb-2 border rounded" rows="4">${existingData.details || ''}</textarea>
                </form>
            `;
            
            showModal(title, formHtml, async () => {
                const data = {
                    orderNumber: document.getElementById('wo-number').value,
                    client: document.getElementById('wo-client').value,
                    date: document.getElementById('wo-date').value,
                    status: document.getElementById('wo-status').value,
                    details: document.getElementById('wo-details').value,
                };
                
                try {
                    if (isEditing) {
                        await updateDoc(doc(db, 'work-orders', docId), data);
                    } else {
                        await addDoc(collection(db, 'work-orders'), data);
                    }
                    hideModal();
                    Swal.fire('تم!', 'تم حفظ أمر العمل بنجاح.', 'success');
                } catch (error) {
                    console.error("Error saving work order: ", error);
                    Swal.fire('خطأ!', 'حدث خطأ أثناء الحفظ.', 'error');
                }
            });
        }
        
        // وظائف أوامر التسليم (مشابهة لأوامر العمل)
        function renderDeliveryOrdersPage() {
             const content = document.getElementById('main-content');
            const headers = {
                ar: ["رقم الأمر", "العميل", "تاريخ التسليم", "الحالة", "إجراءات"],
                en: ["Order #", "Client", "Delivery Date", "Status", "Actions"]
            };
             const labels = {
                ar: { add: "إضافة أمر تسليم جديد", search: "ابحث عن أمر تسليم..." },
                en: { add: "Add New Delivery Order", search: "Search delivery orders..." }
            };
            content.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                     <input id="search-input" type="text" placeholder="${labels[currentLang].search}" class="p-2 border rounded w-1/3">
                    <button id="add-new-do" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">${labels[currentLang].add}</button>
                </div>
                <div class="bg-white shadow-md rounded my-6 overflow-x-auto">
                    <table class="min-w-max w-full table-auto">
                        <thead>
                            <tr class="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                                ${headers[currentLang].map(h => `<th class="py-3 px-6 text-left">${h}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody id="delivery-orders-table" class="text-gray-600 text-sm font-light">
                        </tbody>
                    </table>
                </div>
            `;
            document.getElementById('add-new-do').addEventListener('click', () => openDeliveryOrderModal());
            
            const deliveryOrdersRef = collection(db, "delivery-orders");
            deliveryOrdersUnsubscribe = onSnapshot(deliveryOrdersRef, (snapshot) => {
                const tableBody = document.getElementById('delivery-orders-table');
                tableBody.innerHTML = '';
                snapshot.forEach(doc => {
                    const order = doc.data();
                    const row = `
                        <tr class="border-b border-gray-200 hover:bg-gray-100">
                            <td class="py-3 px-6 text-left">${order.orderNumber}</td>
                            <td class="py-3 px-6 text-left">${order.client}</td>
                            <td class="py-3 px-6 text-left">${order.deliveryDate}</td>
                            <td class="py-3 px-6 text-left"><span class="bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs">${order.status}</span></td>
                            <td class="py-3 px-6 text-center">
                                <div class="flex item-center justify-center">
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 view-do">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                                    </button>
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 edit-do">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                    </button>
                                    <button data-id="${doc.id}" class="w-4 mr-2 transform hover:text-purple-500 hover:scale-110 delete-do admin-only" style="display: ${currentUserData.role === 'admin' ? 'block' : 'none'}">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    tableBody.innerHTML += row;
                });
                attachDeliveryOrderEventListeners();
            });
        }
        
        function attachDeliveryOrderEventListeners() {
            document.querySelectorAll('.edit-do').forEach(btn => btn.addEventListener('click', (e) => openDeliveryOrderModal(e.currentTarget.dataset.id)));
            document.querySelectorAll('.delete-do').forEach(btn => btn.addEventListener('click', (e) => deleteDocument('delivery-orders', e.currentTarget.dataset.id)));
             document.querySelectorAll('.view-do').forEach(btn => btn.addEventListener('click', (e) => viewDocument('delivery-orders', e.currentTarget.dataset.id)));
        }

        async function openDeliveryOrderModal(docId = null) {
             const isEditing = docId !== null;
            let existingData = {};
            if (isEditing) {
                const docRef = doc(db, 'delivery-orders', docId);
                const docSnap = await getDoc(docRef);
                if (docSnap.exists()) {
                    existingData = docSnap.data();
                }
            }

            const title = isEditing ? 'تعديل أمر تسليم' : 'إضافة أمر تسليم جديد';
            const formHtml = `
                <form id="do-form">
                    <input type="text" id="do-number" placeholder="رقم أمر التسليم" class="w-full p-2 mb-2 border rounded" value="${existingData.orderNumber || ''}" required>
                    <input type="text" id="do-client" placeholder="اسم العميل" class="w-full p-2 mb-2 border rounded" value="${existingData.client || ''}" required>
                    <input type="date" id="do-date" class="w-full p-2 mb-2 border rounded" value="${existingData.deliveryDate || new Date().toISOString().split('T')[0]}" required>
                    <select id="do-status" class="w-full p-2 mb-2 border rounded" required>
                        <option value="قيد التجهيز" ${existingData.status === 'قيد التجهيز' ? 'selected' : ''}>قيد التجهيز</option>
                        <option value="تم الشحن" ${existingData.status === 'تم الشحن' ? 'selected' : ''}>تم الشحن</option>
                        <option value="تم التسليم" ${existingData.status === 'تم التسليم' ? 'selected' : ''}>تم التسليم</option>
                    </select>
                    <textarea id="do-items" placeholder="قائمة الأصناف" class="w-full p-2 mb-2 border rounded" rows="4">${existingData.items || ''}</textarea>
                </form>
            `;
            
            showModal(title, formHtml, async () => {
                const data = {
                    orderNumber: document.getElementById('do-number').value,
                    client: document.getElementById('do-client').value,
                    deliveryDate: document.getElementById('do-date').value,
                    status: document.getElementById('do-status').value,
                    items: document.getElementById('do-items').value,
                };
                
                try {
                    if (isEditing) {
                        await updateDoc(doc(db, 'delivery-orders', docId), data);
                    } else {
                        await addDoc(collection(db, 'delivery-orders'), data);
                    }
                    hideModal();
                    Swal.fire('تم!', 'تم حفظ أمر التسليم بنجاح.', 'success');
                } catch (error) {
                    console.error("Error saving delivery order: ", error);
                    Swal.fire('خطأ!', 'حدث خطأ أثناء الحفظ.', 'error');
                }
            });
        }
        
        // وظائف إدارة المستخدمين
        function renderUsersPage() {
            // ... (Implementation similar to work/delivery orders, for admins only)
        }

        // وظائف المودال (Modal)
        const modal = document.getElementById('modal-template');
        function showModal(title, body, onSave) {
            document.getElementById('modal-title-text').textContent = title;
            document.getElementById('modal-body').innerHTML = body;
            document.getElementById('modal-save-button').textContent = translations[currentLang].save;
            document.getElementById('modal-cancel-button').textContent = translations[currentLang].cancel;
            
            const saveBtn = document.getElementById('modal-save-button');
            const newSaveBtn = saveBtn.cloneNode(true);
            saveBtn.parentNode.replaceChild(newSaveBtn, saveBtn);
            newSaveBtn.addEventListener('click', onSave);
            
            modal.classList.remove('hidden');
        }

        function hideModal() {
            modal.classList.add('hidden');
        }
        document.getElementById('modal-cancel-button').addEventListener('click', hideModal);
        
        // وظيفة الحذف مع تأكيد
        async function deleteDocument(collectionName, docId) {
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لا يمكنك التراجع عن هذا الإجراء!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'نعم، احذفه!',
                cancelButtonText: 'إلغاء'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        await deleteDoc(doc(db, collectionName, docId));
                        Swal.fire('تم الحذف!', 'تم حذف السجل بنجاح.', 'success');
                    } catch (error) {
                        Swal.fire('خطأ!', 'حدث خطأ أثناء الحذف.', 'error');
                    }
                }
            })
        }
        
        // وظيفة عرض التفاصيل للطباعة
        async function viewDocument(collectionName, docId) {
            const docRef = doc(db, collectionName, docId);
            const docSnap = await getDoc(docRef);

            if (docSnap.exists()) {
                const data = docSnap.data();
                const isWorkOrder = collectionName === 'work-orders';
                const title = isWorkOrder ? 'أمر عمل' : 'أمر تسليم';

                let detailsHtml = '';
                for (const [key, value] of Object.entries(data)) {
                    detailsHtml += `<p class="mb-2"><strong>${key}:</strong> ${value}</p>`;
                }

                const reportHtml = `
                    <div class="p-8 bg-white">
                        <div class="flex justify-between items-center border-b pb-4 mb-6">
                            <h1 class="text-3xl font-bold">${title} #${data.orderNumber}</h1>
                            <img src="https://storage.googleapis.com/gemini-prod-us-west1-423523961425-assets/9e6e8125026900a0b25e133c94f57c91" alt="شعار الشركة" class="h-20">
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                           ${detailsHtml}
                        </div>
                         <div class="mt-8 text-center text-gray-500 text-sm">
                            <p>Dietsmann Libya</p>
                            <p>Tripoli, Libya</p>
                        </div>
                    </div>
                `;
                
                document.getElementById('print-area').innerHTML = reportHtml;
                
                Swal.fire({
                    title: `تفاصيل ${title}`,
                    html: reportHtml,
                    width: '800px',
                    showCancelButton: true,
                    confirmButtonText: 'طباعة',
                    cancelButtonText: 'إغلاق',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.print();
                    }
                });

            } else {
                Swal.fire('خطأ', 'المستند غير موجود', 'error');
            }
        }


        // وظيفة تصدير Excel
        document.getElementById('export-excel').addEventListener('click', async () => {
            try {
                const woSnapshot = await getDocs(collection(db, "work-orders"));
                const woData = woSnapshot.docs.map(doc => doc.data());

                const doSnapshot = await getDocs(collection(db, "delivery-orders"));
                const doData = doSnapshot.docs.map(doc => doc.data());

                const wb = XLSX.utils.book_new();
                
                if (woData.length > 0) {
                    const ws_wo = XLSX.utils.json_to_sheet(woData);
                    XLSX.utils.book_append_sheet(wb, ws_wo, "Work Orders");
                }
                
                if (doData.length > 0) {
                    const ws_do = XLSX.utils.json_to_sheet(doData);
                    XLSX.utils.book_append_sheet(wb, ws_do, "Delivery Orders");
                }

                XLSX.writeFile(wb, "Procurement_Data.xlsx");
                Swal.fire('نجاح', 'تم تصدير البيانات بنجاح!', 'success');
            } catch (error) {
                console.error("Error exporting to Excel: ", error);
                Swal.fire('خطأ', 'فشل تصدير البيانات.', 'error');
            }
        });

        // تهيئة اللغة عند التحميل
        updateUIlanguage();
        
        // ملاحظة هامة: يجب إنشاء مستخدمين يدويًا في Firebase Authentication
        // وإضافة مستنداتهم في مجموعة 'users' في Firestore مع حقل 'role' ('admin' or 'user')
        // مثال: { name: "Admin User", role: "admin" }

    </script>
</body>
</html>
